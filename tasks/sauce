#!/usr/bin/env node
const ora = require('ora');
const fetch = require('node-fetch');
const pkg = require('../package');
const spinner = ora();

// Environment variables
const pr = process.env.TRAVIS_PULL_REQUEST;
const sauceUser = process.env.SAUCE_USER_NAME;
const sauceAccessKey = process.env.SAUCE_ACCESS_KEY;
const sauceBuild = process.env.SAUCE_BUILD || (pr ? `PR #${pr}` : `v${pkg.version}`);

// Settings
const url = `https://${sauceUser}:${sauceAccessKey}@saucelabs.com/rest/v1/${sauceUser}/js-tests`;
const pollTimeout = 3000;

const pollResults = ids => {
  setTimeout(() => {

    fetch(`${url}/status`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: ids
    })
    .then(res => res.json())
    .then(data => {
      if (!data.completed) {
        return pollResults(ids);
      }
      const failed = data['js tests'].some(test => test.result.failures);
      spinner.succeed(failed? ' Failed.' : ' Passed.');
      process.exit(failed ? 1 : 0);
    })
    // TODO: improve error output
    .catch(err => spinner.fail(` ${err.message}`));
  }, pollTimeout);
}

spinner.start(` Requesting test execution on Sauce Labs for build ${sauceBuild}...`);

fetch(url, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      name: sauceUser,
      build: sauceBuild,
      platforms: [
        ['Windows 7', 'internet explorer', '10'],
        ['Windows 7', 'internet explorer', '11'],
        ['Windows 10', 'microsoftedge', 'latest'],
        ['Windows 10', 'chrome', 'latest'],
        ['Windows 10', 'firefox', 'latest'],
        ['Mac 10.12', 'safari', 'latest']
      ],
      url: 'https://lquixada.github.io/cross-fetch/test/public/',
      framework: 'mocha'
    })
  })
  .then(res => {
    if (res.status >= 400) {
      throw new Error('Bad response from server');
    }

    spinner.stopAndPersist({
      symbol: 'â†—'
    });
    spinner.succeed(` Success! Running on https://saucelabs.com/u/${sauceUser}...`);
    spinner.start(' Waiting for results...');
    return res.text();
  })
  .then(pollResults)
  // TODO: improve error output
  .catch(err => spinner.fail(` ${err.message}`));

